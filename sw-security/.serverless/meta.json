{
  "C:\\Users\\82109\\Desktop\\sw-security-web-app_FE\\sw-security\\serverless.yml": {
    "versionFramework": "4.7.0",
    "servicePath": "C:\\Users\\82109\\Desktop\\sw-security-web-app_FE\\sw-security\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "Vero",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "region": "us-east-2",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::vero-react/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "RemixLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Vero-dev-remix"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "Vero",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Vero-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Vero-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject"
                          ],
                          "Resource": "arn:aws:s3:::vero-react/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:InvokeFunction",
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "Vero",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "RemixLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-bcee10d3-c765",
                  "S3Key": "serverless/Vero/dev/1740737152874-2025-02-28T10:05:52.874Z/Vero.zip"
                },
                "Handler": "handler.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "Vero-dev-remix",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "ReactLayer"
                  }
                ]
              },
              "DependsOn": [
                "RemixLogGroup"
              ]
            },
            "RemixLambdaVersionGYDzJsDXjXH7Eeo3RsRKwokOWPFK1eUiBVsnPLVdS4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RemixLambdaFunction"
                },
                "CodeSha256": "FP8G9dxCh17DJy7/AKpPer0JIv1B5Jck4Hf6A7uPXVY="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-Vero",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RemixLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "RemixLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RemixLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "RemixLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1740737137844": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodOptions",
                "ApiGatewayMethodProxyVarAny",
                "ApiGatewayMethodAny"
              ]
            },
            "RemixLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RemixLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ReactLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "LayerName": "react-layer",
                "Content": {
                  "S3Bucket": "vero-react",
                  "S3Key": "nodejs.zip"
                },
                "CompatibleRuntimes": [
                  "nodejs16.x"
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-2-bcee10d3-c765",
              "Export": {
                "Name": "sls-Vero-dev-ServerlessDeploymentBucketName"
              }
            },
            "RemixLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RemixLambdaVersionGYDzJsDXjXH7Eeo3RsRKwokOWPFK1eUiBVsnPLVdS4"
              },
              "Export": {
                "Name": "sls-Vero-dev-RemixLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Vero-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "resources": {
        "Resources": {
          "ReactLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "LayerName": "react-layer",
              "Content": {
                "S3Bucket": "vero-react",
                "S3Key": "nodejs.zip"
              },
              "CompatibleRuntimes": [
                "nodejs16.x"
              ]
            }
          }
        },
        "Outputs": {}
      },
      "functions": {
        "remix": {
          "handler": "handler.handler",
          "events": [
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            },
            {
              "http": {
                "path": "",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "layers": [
            {
              "Ref": "ReactLayer"
            }
          ],
          "name": "Vero-dev-remix",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "RemixLambdaVersionGYDzJsDXjXH7Eeo3RsRKwokOWPFK1eUiBVsnPLVdS4"
        }
      },
      "package": {
        "exclude": [
          "test/**",
          ".git/**",
          ".vscode/**",
          "README.md",
          "public/**",
          "app/**",
          "layer/**",
          "build/client/**",
          "node_modules/**"
        ],
        "include": [
          "build/server/index.js",
          "package.json",
          "serverless.yml",
          "handler.js",
          "node_modules/react-icons/**"
        ],
        "artifactsS3KeyDirname": "serverless/Vero/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-2-bcee10d3-c765",
        "artifact": "C:\\Users\\82109\\Desktop\\sw-security-web-app_FE\\sw-security\\.serverless\\Vero.zip",
        "artifactDirectoryName": "serverless/Vero/dev/1740737152874-2025-02-28T10:05:52.874Z"
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "region": "us-east-2",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::vero-react/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "RemixLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Vero-dev-remix"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "Vero",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Vero-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Vero-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject"
                        ],
                        "Resource": "arn:aws:s3:::vero-react/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction",
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "Vero",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RemixLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-bcee10d3-c765",
                "S3Key": "serverless/Vero/dev/1740737152874-2025-02-28T10:05:52.874Z/Vero.zip"
              },
              "Handler": "handler.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Vero-dev-remix",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "ReactLayer"
                }
              ]
            },
            "DependsOn": [
              "RemixLogGroup"
            ]
          },
          "RemixLambdaVersionGYDzJsDXjXH7Eeo3RsRKwokOWPFK1eUiBVsnPLVdS4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemixLambdaFunction"
              },
              "CodeSha256": "FP8G9dxCh17DJy7/AKpPer0JIv1B5Jck4Hf6A7uPXVY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-Vero",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemixLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "RemixLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemixLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "RemixLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1740737137844": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodAny"
            ]
          },
          "RemixLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemixLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReactLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "LayerName": "react-layer",
              "Content": {
                "S3Bucket": "vero-react",
                "S3Key": "nodejs.zip"
              },
              "CompatibleRuntimes": [
                "nodejs16.x"
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-bcee10d3-c765",
            "Export": {
              "Name": "sls-Vero-dev-ServerlessDeploymentBucketName"
            }
          },
          "RemixLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemixLambdaVersionGYDzJsDXjXH7Eeo3RsRKwokOWPFK1eUiBVsnPLVdS4"
            },
            "Export": {
              "Name": "sls-Vero-dev-RemixLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-Vero-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "An error occurred: RemixLambdaFunction - Resource handler returned message: \"Function code combined with layers exceeds the maximum allowed size of 262144000 bytes. The actual size is 290357648 bytes. (Service: Lambda, Status Code: 400, Request ID: 4044770a-8615-4ed3-900c-6586d13320fb)\" (RequestToken: d9688a56-77ec-49a8-b272-4750fc4dbc80, HandlerErrorCode: InvalidRequest).",
      "stack": "ServerlessError3: An error occurred: RemixLambdaFunction - Resource handler returned message: \"Function code combined with layers exceeds the maximum allowed size of 262144000 bytes. The actual size is 290357648 bytes. (Service: Lambda, Status Code: 400, Request ID: 4044770a-8615-4ed3-900c-6586d13320fb)\" (RequestToken: d9688a56-77ec-49a8-b272-4750fc4dbc80, HandlerErrorCode: InvalidRequest).\n    at file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1231:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AwsDeploy.createFallback (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1231:23748)\n    at async aws:deploy:deploy:updateStack (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1242:8029)\n    at async PluginManager.runHooks (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:9562)\n    at async PluginManager.invoke (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10333)\n    at async PluginManager.spawn (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10696)\n    at async PluginManager.runHooks (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:9562)\n    at async PluginManager.invoke (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10333)\n    at async PluginManager.run (file:///C:/Users/82109/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:11068)",
      "code": "AWS_CLOUD_FORMATION_CREATE_STACK_INTERNAL_LAMBDA_FUNCTION_CREATE_FAILED"
    },
    "serviceRawFile": "service: Vero\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs16.x\r\n  region: us-east-2\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - \"s3:GetObject\"\r\n      Resource:\r\n        - \"arn:aws:s3:::vero-react/*\"\r\n    - Effect: Allow\r\n      Action:\r\n        - lambda:InvokeFunction\r\n        - logs:CreateLogGroup\r\n        - logs:CreateLogStream\r\n        - logs:PutLogEvents\r\n      Resource:\r\n        - arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*\r\n\r\nresources:\r\n  Resources:\r\n    ReactLayer:\r\n      Type: AWS::Lambda::LayerVersion\r\n      Properties:\r\n        LayerName: react-layer\r\n        Content:\r\n          S3Bucket: vero-react # 업로드한 S3 버킷 이름\r\n          S3Key: nodejs.zip\r\n        CompatibleRuntimes:\r\n          - nodejs16.x\r\n\r\nfunctions:\r\n  remix:\r\n    handler: handler.handler\r\n    events:\r\n      - http:\r\n          path: /{proxy+} # 모든 요청을 Lambda로 처리\r\n          method: any # 모든 HTTP 메서드 처리\r\n          cors: true\r\n          integration: lambda # Lambda와의 통합 확인\r\n      - http:\r\n          path: / # 모든 요청을 Lambda로 처리\r\n          method: any # 모든 HTTP 메서드 처리\r\n          cors: true\r\n          integration: lambda # Lambda와의 통합 확인\r\n    layers:\r\n      - { Ref: ReactLayer } # 위에서 정의한 reactLayer를 Lambda 함수에 연결\r\n\r\npackage:\r\n  exclude:\r\n    - test/**\r\n    - .git/**\r\n    - .vscode/**\r\n    - README.md\r\n    - public/**\r\n    - app/**\r\n    - layer/**\r\n    - build/client/**\r\n    - node_modules/**\r\n\r\n  include:\r\n    - build/server/index.js\r\n    - package.json\r\n    - serverless.yml\r\n    - handler.js\r\n    - node_modules/react-icons/**\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "c1de97f9-b211-430c-a357-632a4367cec1",
    "orgName": "nyeonseok",
    "userId": "Rw0x7qgd1JTB467Ffv",
    "userName": "nyeonseok",
    "serviceProviderAwsAccountId": "842675981188",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}